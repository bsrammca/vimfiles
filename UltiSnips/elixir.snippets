snippet @doc "doc"
@doc """
${1}
"""$0
endsnippet

snippet @moduledoc "@moduledoc"
@moduledoc ~S"""
${1}
"""$0
endsnippet

snippet defmodule "defmodule and doc"
defmodule ${1} do
	@moduledoc ~S"""
	${2:...}
	"""$0
end
endsnippet

snippet def "doc and def"
@doc """
${2:...}
"""
def ${1:my_function} do${0}
end
endsnippet

snippet defp "doc and defp"
# ${2:...}
defp ${1:my_function()} do${0}
end
endsnippet

snippet r "require"
require ${0:Module}
endsnippet

snippet u "use"
use ${0:Module}
endsnippet

snippet i "import"
import ${0:Module}
endsnippet

snippet a "alias"
alias ${0:My.Module}
endsnippet

snippet puts "IO.puts"
IO.puts 
endsnippet

snippet ins "|> IO.inspect()"
|> IO.inspect(pretty: true, width: 40)
endsnippet

snippet insl "|> IO.inspect(label: ...)"
|> IO.inspect(pretty: true, width: 40, label: $1)
endsnippet

snippet lins "Logger.debug(inspect(...))"
Logger.debug("-> $1: #{inspect(${1}, pretty: true)}")
endsnippet

snippet ld "Logger.debug(...)"
Logger.debug("$0")
endsnippet

snippet mix "mix.exs for hex packages"
defmodule ${1/\w+\s*/\u$0/}.Mixfile do
	use Mix.Project

	@version "0.0.1"
	@description """
	${2:...}
	"""

	def project do
		[app: :${1},
		 version: @version,
		 description: @description,
		 elixir: "~> 1.2",
		 elixirc_paths: elixirc_paths(Mix.env),
		 build_embedded: Mix.env == :prod,
		 start_permanent: Mix.env == :prod,
		 source_url: "`git config --get remote.origin.url | sed -e 's/\.git$//'`",
		 homepage_url: "`git config --get remote.origin.url | sed -e 's/\.git$//'`",
		 docs: docs(),
		 package: package(),
		 deps: deps()]
	end

	def application do
		[applications: [:logger]]
	end

	defp deps do
		[
			{:ex_doc, "~> 0.11", only: :dev}
		]
	end

	defp elixirc_paths(:test), do: ["lib", "test/support"]
	defp elixirc_paths(_), do: ["lib"]

	def package do
		[
			maintainers: ["Rico Sta. Cruz"],
			licenses: ["MIT"],
			files: ["lib", "mix.exs", "README.md"],
			links: %{github: "`git config --get remote.origin.url | sed -e 's/\.git$//'`"}
		]
	end

	def docs do
		[
			source_ref: "v#{@version}",
			main: "readme",
			extras: [
				Path.wildcard("*.md") |
				Path.wildcard("docs/**/*.md")
			]
		]
	end
end
endsnippet

snippet ctest "Controller test"
defmodule ${1:App}.${2:Model}ControllerTest do
  use $1.ConnCase

  alias $1.$2
  @valid_attrs %{title: "Hello"}
  @invalid_attrs %{}

  test "GET :index", %{conn: conn} do
    conn = get conn, ${2/.*/\l$0/}_path(conn, :index)
    assert html_response(conn, 200) =~ "<html"
  end

  test "GET :new", %{conn: conn} do
    conn = get conn, ${2/.*/\l$0/}_path(conn, :new)
    assert html_response(conn, 200) =~ "<html"
  end

  test "POST :create", %{conn: conn} do
    conn = post conn, ${2/.*/\l$0/}_path(conn, :create), ${2/.*/\l$0/}: @valid_attrs
    assert redirected_to(conn) == ${2/.*/\l$0/}_path(conn, :index)
    assert Repo.get_by($2, @valid_attrs)
  end

  test "POST :create (invalid)", %{conn: conn} do
    conn = post conn, ${2/.*/\l$0/}_path(conn, :create), ${2/.*/\l$0/}: @invalid_attrs
    assert html_response(conn, 200) =~ "<html"
  end

  test "GET :show", %{conn: conn} do
    ${2/.*/\l$0/} = Repo.insert! %$2{}
    conn = get conn, ${2/.*/\l$0/}_path(conn, :show, ${2/.*/\l$0/})
    assert html_response(conn, 200) =~ "<html"
  end

  test "GET :show (invlaid)", %{conn: conn} do
    assert_error_sent 404, fn ->
      get conn, ${2/.*/\l$0/}_path(conn, :show, "11111111-1111-1111-1111-111111111111")
    end
  end

  test "GET :edit", %{conn: conn} do
    ${2/.*/\l$0/} = Repo.insert! %$2{}
    conn = get conn, ${2/.*/\l$0/}_path(conn, :edit, ${2/.*/\l$0/})
    assert html_response(conn, 200) =~ "<html"
  end

  test "PUT :update", %{conn: conn} do
    ${2/.*/\l$0/} = Repo.insert! %$2{}
    conn = put conn, ${2/.*/\l$0/}_path(conn, :update, ${2/.*/\l$0/}), ${2/.*/\l$0/}: @valid_attrs
    assert redirected_to(conn) == ${2/.*/\l$0/}_path(conn, :show, ${2/.*/\l$0/})
    assert Repo.get_by($2, email: @email)
  end

  test "PUT :update (invalid)", %{conn: conn} do
    ${2/.*/\l$0/} = Repo.insert! %$2{}
    conn = put conn, ${2/.*/\l$0/}_path(conn, :update, ${2/.*/\l$0/}), ${2/.*/\l$0/}: @invalid_attrs
    assert html_response(conn, 200) =~ "<html"
  end

  test "DELETE :delete", %{conn: conn} do
    ${2/.*/\l$0/} = Repo.insert! %$2{}
    conn = delete conn, ${2/.*/\l$0/}_path(conn, :delete, ${2/.*/\l$0/})
    assert redirected_to(conn) == ${2/.*/\l$0/}_path(conn, :index)
    refute Repo.get($2, ${2/.*/\l$0/}.id)
  end
end
endsnippet
